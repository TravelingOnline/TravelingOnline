version: '3.8'

services:
  # auth-postgres:
  #   image: 'postgres:latest'
  #   container_name: auth-postgres
  #   environment:
  #     POSTGRES_DB: ${AUTH_POSTGRES_DB_NAME}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   networks:
  #     - online-traveling-network
  #   ports:
  #     - '${POSTGRES_PORT}:5432'
  # zookeeper:
  #   image: 'confluentinc/cp-zookeeper:latest'
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - online-traveling-network
  #   ports:
  #     - '2181:2181'

  # kafka:
  #   image: 'confluentinc/cp-kafka:latest'
  #   container_name: kafka
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
  #     KAFKA_ADVERTIZED_HOST_NAME: localhost
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - '9092:9092'
  #   networks:
  #     - online-traveling-network
  # redis:
  #   image: redis:6.2-alpine
  #   container_name: redis
  #   command: redis-server
  #   restart: always
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  # auth-service:
  #   build:
  #     context: ./auth
  #   container_name: auth-service
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - ENV=production
  #     - TZ=Asia/Tehran
  #     - AUTH_CONFIG_PATH=/app/config.json
  #     - KAFKA_BROKER=kafka:9092
  #   networks:
  #     - online-traveling-network
  #   restart: unless-stopped
  #   depends_on:
  #     - auth-postgres
  #     - kafka
  #   volumes:
  #     - ${AUTH_CONFIG_PATH}:/app/config.json

  vehicle-postgres:
    image: 'docker.arvancloud.ir/postgres:latest'
    container_name: vehicle-postgres
    environment:
      POSTGRES_DB: ${VEHICLE_POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - online-traveling-network
    ports:
      - '5432:5432'
    volumes:
      - vehicle_postgres_data:/var/lib/postgresql/data

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${VEHICLE_POSTGRES_DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5
  

  vehicle-service:
    build:
      context: ./vehicle
    container_name: vehicle-service
    ports:
      - "8081:8081"
    networks:
      - online-traveling-network
    restart: unless-stopped
    depends_on:
      vehicle-postgres:
        condition: service_healthy
    
  transport-postgres:
    image: 'docker.arvancloud.ir/postgres:latest'
    container_name: transport-postgres
    environment:
      POSTGRES_DB: ${TRANSPORT_POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - online-traveling-network
    ports:
      - '5433:5432'
    volumes:
      - transport_postgres_data:/var/lib/postgresql/data

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${TRANSPORT_POSTGRES_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  transport-service:
    build:
      context: ./transport
    container_name: transport-service
    ports:
      - "8082:8082"
    networks:
      - online-traveling-network
    restart: unless-stopped
    depends_on:
      transport-postgres:
        condition: service_healthy
   
networks:
  online-traveling-network:
    driver: bridge
volumes:
  redis-data:
    driver: local
  vehicle_postgres_data:
  transport_postgres_data:
